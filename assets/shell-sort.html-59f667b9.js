import{_ as n,o as s,c as a,a as p}from"./app-5b0f25a8.js";const t="/images/shell-sort-1.png",e={},o=p('<h1 id="希尔排序" tabindex="-1"><a class="header-anchor" href="#希尔排序" aria-hidden="true">#</a> 希尔排序</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>希尔排序是一种插入排序的算法，它是对简单的插入排序进行改进后，更高效的版本。</p><p>特点是利用增量，将数组分成一组组子序列，然后对子序列进行插入排序。</p><p>由于增量是从大到小，逐次递减，所以也称为缩小增量排序。</p><p><img src="'+t+`" alt="1"></p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h2><p>初始数据为arr = [8,9,1,7,2,3,5,4,6,0];<br> 初始增量设置为数组长度的一半，即flag = arr.length/2 = 5;<br> 每次增量减少一半，直到小于1结束。</p><p>以5为增量：</p><ul><li>第一步 下标为0 {8,3}</li><li>第二步 下标为1 {9,5}</li><li>第三步 下标为2 {1,4}</li><li>第四步 下标为3 {7,6}</li><li>第五步 下标为4 {2,0}</li></ul><p>总共得到 五组{8,3} {9,5} {1,4} {7,6} {2,0}<br> 对每一组进行直接插入排序，得到{3,8} {5,9} {1,4} {6,7} {0,2}<br> 最终结果为 [3,5,1,6,0,8,9,4,7,2]</p><p>以2位增量：</p><ul><li>第一步 下标为0 {3,1,0,9,7}</li><li>第二步 下标为1 {5,6,8,4,2}</li></ul><p>总共得到 两组{3,1,0,9,7},{5,6,8,4,2}<br> 对每一组进行直接插入排序，得到{0,1,3,7,9},{2,4,5,6,8}<br> 最终结果为 [0,2,1,4,3,5,7,6,9,8]</p><p>以1为增量：</p><ul><li>第一步{0,2,1,4,3,5,7,6,9,8}</li><li>进行直接插入排序[0,1,2,3,4,5,6,7,8,9]</li><li>下次增量为0结束。</li></ul><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 希尔排序
 */</span>
<span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用gap值对数组进行分组，然后对分组进行插入排序，直到gap值=1</span>
    <span class="token comment">// 首次gap值为Math.floor(arr.length / 2)</span>
    <span class="token comment">// 后面gap值为Math.floor(gap / 2)</span>
    <span class="token keyword">let</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过gap分组</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> gap<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 遍历每一组，并进行插入排序</span>
            <span class="token comment">// 插入排序的原理是，假设第一个数已经排好序，从第二个数开始</span>
            <span class="token comment">// 第一个数是k,第二个数是k+gap</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> k <span class="token operator">+</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> cur <span class="token operator">=</span> i
                <span class="token comment">// 注意不是j--哦，因为已经通过gap分组</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果前一个数比当前数大，就交换位置，否则就插入</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span>
                        arr<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> temp
                        cur <span class="token operator">=</span> j
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 插入就不继续循环了</span>
                        <span class="token keyword">break</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 继续缩小gap</span>
        gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","shell-sort.html.vue"]]);export{k as default};
