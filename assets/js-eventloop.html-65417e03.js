import{_ as e,r as p,o,c,b as n,d as s,e as i,a}from"./app-5b0f25a8.js";const l="/images/js-eventloop-1.png",u={},r=a('<h1 id="js事件循环" tabindex="-1"><a class="header-anchor" href="#js事件循环" aria-hidden="true">#</a> JS事件循环</h1><h2 id="为什么会有event-loop" tabindex="-1"><a class="header-anchor" href="#为什么会有event-loop" aria-hidden="true">#</a> 为什么会有event loop</h2><p>因为js是单线程的，最大的特点就是容易出现阻塞问题。所以设计了event loop来解决这个问题，并规范了同步任务和异步任务两种。</p><h2 id="同步任务与异步任务" tabindex="-1"><a class="header-anchor" href="#同步任务与异步任务" aria-hidden="true">#</a> 同步任务与异步任务</h2><p>异步任务又分为：微任务(micro task) 和 宏任务(macro task)<br></p><p>微任务：</p><ul><li>new Promise(func).then()中的then()的代码</li><li>process.nextTick(node环境)</li><li>MutationObserver(浏览器)</li></ul><p>宏任务：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node独有)</li><li>DOM事件</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O</li><li>UI rendering (浏览器独有)</li></ul><blockquote><p>注意： new Promise(func).then()中的func代码是同步任务，then()是异步代码 执行顺序setImmediate永远优先于setTimeout 除上述异步任务，其他都是同步任务。</p></blockquote><h2 id="任务执行顺序" tabindex="-1"><a class="header-anchor" href="#任务执行顺序" aria-hidden="true">#</a> 任务执行顺序</h2><p>同步任务-&gt;微任务-&gt;宏任务</p><h2 id="什么是event-loop" tabindex="-1"><a class="header-anchor" href="#什么是event-loop" aria-hidden="true">#</a> 什么是event loop</h2><p>事件循环就是任务在主线程不断进栈出栈执行的一个循环过程。<br></p><ol><li>优先执行同步队列中的同步任务</li><li>执行完同步任务后，执行微任务</li><li>执行完微任务后，执行宏任务</li></ol><p><img src="'+l+'" alt="流程"></p><p>注意：</p><ul><li>setTimeout、setInterval的回调函数并不是直接放到宏任务队列中，当程序遇到setTimeout函数时，会先将setTimeout暂时交给一个js引擎的Timer模块管理，等倒计时完成后Timer模块才将setTimeout的回调函数放到宏任务队列中</li><li>await后面的代码是异步代码</li><li>new Promise(func).then()中的func代码是同步任务，then()是异步代码</li><li>Promise没有返回值时（没有执行resolve或reject），后面的代码不会执行</li><li>Promise.then().then()链式调用时，上一层then一定要有返回值，否则下一层的then的res就是undefined，finally()的res是then的返回值。</li></ul><h2 id="addeventlistener和dispatchevent输出问题-难点" tabindex="-1"><a class="header-anchor" href="#addeventlistener和dispatchevent输出问题-难点" aria-hidden="true">#</a> addEventListener和dispatchEvent输出问题（难点）</h2>',19),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;本轮任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;本轮微任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p1&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//浏览器自动执行的话，这一步变为同步代码，其原理是dispatchEvent</span>
<span class="token comment">// var event = new Event(&#39;click&#39;)</span>
<span class="token comment">// document.getElementById(&#39;btn&#39;).dispatchEvent(event)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;本轮任务end&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 上述代码输出：本轮任务、click1、click2、本轮任务end、本轮微任务、p1、p2、setTimeout</span>

<span class="token comment">//如果是用户点击按钮，则输出：click1、p1、click2、p2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在JavaScript中，代码执行的顺序是：</p><ul><li>默认同步代码按照顺序自上而下，从左到右执行，运行过程中注册本次的微任务和后续的宏任务</li><li>对于微任务，直接放入任务队列，在下一次宏任务开始前立即执行</li><li>对于宏任务，放入工作线程，等宏任务获得结果后进入任务队列</li><li>执行本次同步代码中注册的微任务， 并注册微任务中包含的宏任务和微任务</li><li>将下一次宏任务开始前的微任务执行完毕</li><li>执行最先进入任务队列的宏任务，并注册此次宏任务中的 微任务和后续的宏任务，同样的微任务放入任务队列，在下一次宏任务开始前执行， 宏任务放入工作线程，等获得结果后进入任务队列</li></ul>`,4);function v(m,h){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("dispatchEvent和经由浏览器触发，并通过事件循环异步调用事件处理程序的“原生”事件不同，dispatchEvent() 会同步调用事件处理函数。在 dispatchEvent() 返回之前，所有监听该事件的事件处理程序将在代码继续前执行并返回。 "),n("a",k,[s("参考"),i(t)])]),d])}const g=e(u,[["render",v],["__file","js-eventloop.html.vue"]]);export{g as default};
