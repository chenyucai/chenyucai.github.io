import{_ as n,o as s,c as a,a as t}from"./app-5b0f25a8.js";const o={},e=t(`<h1 id="instanceof原理" tabindex="-1"><a class="header-anchor" href="#instanceof原理" aria-hidden="true">#</a> instanceof原理</h1><p>其原理就是看实例对象的__proto__的原型对象和构造函数prototype的原型对象是不是同一个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2 <span class="token keyword">instanceof</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">M</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 所以如果有继承，用instanceof判断就不严谨，可以用constructor</span>
<span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> fn
<span class="token punctuation">}</span>
<span class="token comment">// 手写instanceof</span>
<span class="token keyword">function</span> <span class="token function">instance_of</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> newFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> leftObj <span class="token operator">=</span> obj<span class="token punctuation">.</span>__proto__
    <span class="token keyword">let</span> targetObj <span class="token operator">=</span> newFunc<span class="token punctuation">.</span>prototype
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftObj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>        
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>leftObj <span class="token operator">===</span> targetObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>        
        <span class="token punctuation">}</span>
        leftObj <span class="token operator">=</span> leftObj<span class="token punctuation">.</span>__proto__
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),p=[e];function c(l,i){return s(),a("div",null,p)}const r=n(o,[["render",c],["__file","js-instanceof.html.vue"]]);export{r as default};
