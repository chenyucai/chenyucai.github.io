import{_ as e,o as t,c as a,a as i}from"./app-5b0f25a8.js";const c={},r=i('<h1 id="webpack处理typescript" tabindex="-1"><a class="header-anchor" href="#webpack处理typescript" aria-hidden="true">#</a> webpack处理typescript</h1><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案" aria-hidden="true">#</a> 方案</h2><ul><li>如果没有使用 Babel，首选 TypeScript 自带编译器（配合 ts-loader 使用）</li><li>如果项目中有 Babel，安装 @babel/preset-typescript，配合 tsc 做类型检查。</li><li>两种编译器不要混用。</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ul><li>在编译前使用 tsc --noEmit 来做静态检查；</li><li>用 babel-loader 来编译；</li><li>再用 tsc --emitDeclerationOnly 来单独生成 .d.ts 文件。因为@babel/preset-typescript不走类型检查，所以速度会快。</li></ul><blockquote><p>tsc --init 命令自动生成tsconfig.json文件</p></blockquote>',6),l=[r];function s(o,p){return t(),a("div",null,l)}const d=e(c,[["render",s],["__file","webpack-typescript.html.vue"]]);export{d as default};
