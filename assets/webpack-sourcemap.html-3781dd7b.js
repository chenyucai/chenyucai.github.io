import{_ as e,o as a,c,a as r}from"./app-5b0f25a8.js";const l={},o=r('<h1 id="webpack处理sourcemap" tabindex="-1"><a class="header-anchor" href="#webpack处理sourcemap" aria-hidden="true">#</a> webpack处理sourcemap</h1><p>总结一下：</p><h3 id="对于开发环境-适合使用" tabindex="-1"><a class="header-anchor" href="#对于开发环境-适合使用" aria-hidden="true">#</a> 对于开发环境，适合使用</h3><ul><li>eval：速度极快，但只能看到原始文件结构，看不到打包前的代码内容；</li><li>cheap-eval-source-map：速度比较快，可以看到打包前的代码内容，但看不到 loader 处理之前的源码；</li><li>cheap-module-eval-source-map：速度比较快，可以看到 loader 处理之前的源码，不过定位不到列级别；</li><li>eval-source-map：初次编译较慢，但定位精度最高；</li></ul><h3 id="对于生产环境-适合使用" tabindex="-1"><a class="header-anchor" href="#对于生产环境-适合使用" aria-hidden="true">#</a> 对于生产环境，适合使用</h3><ul><li>source-map：信息最完整，但安全性最低，外部用户可轻易获取到压缩、混淆之前的源码，慎重使用；</li><li>hidden-source-map：信息较完整，安全性较低，外部用户获取到 .map 文件地址时依然可以拿到源码；</li><li>nosources-source-map：源码信息缺失，但安全性较高，需要配合 Sentry 等工具实现完整的 Sourcemap 映射。</li></ul>',6),i=[o];function s(d,t){return a(),c("div",null,i)}const p=e(l,[["render",s],["__file","webpack-sourcemap.html.vue"]]);export{p as default};
