import{_ as n,o as s,c as a,a as t}from"./app-5b0f25a8.js";const p="/images/node-eventloop-1.png",e={},o=t('<h1 id="node中的事件循环" tabindex="-1"><a class="header-anchor" href="#node中的事件循环" aria-hidden="true">#</a> Node中的事件循环</h1><h2 id="node-中的异步-api" tabindex="-1"><a class="header-anchor" href="#node-中的异步-api" aria-hidden="true">#</a> Node 中的异步 API</h2><ul><li>定时器：setTimeout、setInterval</li><li>I/O 操作：文件读写、数据库操作、网络请求…</li><li>Node 独有的 API：process.nextTick、setImmediate</li></ul><h2 id="事件循环的流程" tabindex="-1"><a class="header-anchor" href="#事件循环的流程" aria-hidden="true">#</a> 事件循环的流程</h2><p><img src="'+p+`" alt="流程"></p><p>Node事件循环分为6个阶段，这6个阶段会按顺序反复运行，每个阶段都有一个队列。 运行到某个阶段时，都会从该阶段对应的队列中取出回调函数执行。 当队列为空时就会进入下一个阶段。<br></p><ul><li>timer 阶段：处理 setTimeout、setInterval 的回调，由 poll 阶段控制<br></li><li>pending callbacks 阶段：处理系统级别的回调。eg: TCP 连接失败的回调…<br></li><li>idle, prepare 阶段：仅 Node 内部使用，可以忽略<br></li><li>poll 阶段：处理 I/O 操作的回调，文件读写、数据库操作、网络请求…<br></li><li>check 阶段：执行 setImmediate 的回调<br></li><li>close callbacks 阶段：执行关闭请求的回调。eg: socket.on(&#39;close&#39;, ...)…<br></li></ul><blockquote><p>我们主要关注 timer poll check 阶段即可。 注意队列执行的都是回调，例如setTimeout(fn, 2000)表示2秒会把回调函数放入timer队列，一开始timer队列为空，会进入下一个阶段。</p></blockquote><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;脚本开始&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;demo.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setImmediate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;脚本结束&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：&#39;脚本开始&#39; - &#39;脚本结束&#39; - &#39;setImmediate&#39; - &#39;定时器&#39; - data <br></p><p><strong>运行流程:</strong></p><ul><li>主线程从上往下执行代码，遇到异步代码则开启新线程执行，然后主线程继续往下执行。同步代码执行结束后，开始事件循环<br></li><li>执行到 timer 阶段：此时定时器还在执行中，所以 timer 队列为空；执行到 poll 阶段：此时 I/O 操作也还在执行中，poll 队列也为空。事件循环查看 check 队列和 timer 队列是否为空，发现 check 队列中有setImmediate 的回调，事件循环继续往下执行；执行到 check 阶段：取出 check 队列的回调执行，输出 &#39;setImmediate&#39;；事件循环继续往下执行，并暂停在 poll 阶段<br></li><li>10ms 后定时器执行完毕，回调加入 timer 队列，事件循环继续执行，输出 &#39;定时器&#39;；事件循环执行到 poll 阶段并在此处暂停<br></li><li>20ms 后 I/O 操作执行完毕，回调加入 poll 队列，事件循环继续执行，输出 data<br></li></ul><h2 id="微任务队列" tabindex="-1"><a class="header-anchor" href="#微任务队列" aria-hidden="true">#</a> 微任务队列</h2><p>常见的宏任务：setTimeout、setInterval、setImmediate、script(整体代码)、I/O 操作…<br> 常见的微任务：process.nextTick()、new Promise().then catch finally…<br> 微任务比宏任务的优先级高，所以会在执行宏任务之前先清空微任务队列<br> 微任务中，nextTick 的优先级较高，会先执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;nextTick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：nextTick - promise - timeout</p>`,17),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(e,[["render",i],["__file","node-eventloop.html.vue"]]);export{k as default};
