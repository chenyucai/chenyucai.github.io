import{_ as n,o as a,c as s,a as e}from"./app-5b0f25a8.js";const o={},t=e(`<h1 id="webpack之treeshaking" tabindex="-1"><a class="header-anchor" href="#webpack之treeshaking" aria-hidden="true">#</a> webpack之treeShaking</h1><h2 id="使用-tree-shaking-删除多余模块导出" tabindex="-1"><a class="header-anchor" href="#使用-tree-shaking-删除多余模块导出" aria-hidden="true">#</a> 使用 Tree-Shaking 删除多余模块导出</h2><p><code>Tree-Shaking</code> 较早前由 Rich Harris 在 Rollup 中率先实现，Webpack 自 2.0 版本开始接入，是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，判断哪些模块导出值没有被其它模块使用 —— 相当于模块层面的<code> Dead Code</code>，并将其删除.</p><p>Webpack 中，<code>Tree-shaking</code> 的实现，一是需要先 <code>「标记」</code> 出模块导出值中哪些没有被用过；二是使用代码压缩插件 —— 如 <code>Terser</code> 删掉这些没被用到的导出变量。</p><p>在 Webpack 中，启动 Tree Shaking 功能必须同时满足三个条件：</p><ul><li>使用 ESM 规范编写模块代码；</li><li>配置 optimization.usedExports 为 true，启动标记功能；</li><li>启动代码优化功能，可以通过如下方式实现： <ul><li>配置 mode = production；</li><li>配置 optimization.minimize = true ；</li><li>提供 optimization.minimizer 数组。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式自动开启</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 CommonJs、AMD、CMD 等旧版本的 JavaScript 模块化方案中，导入导出行为是高度动态，难以预测的；比如将 <code>require()</code> 语句写在判断逻辑中。而 ESM 方案要求所有的导入导出语句只能出现在模块顶层，模块之间的依赖关系是高度确定的，与运行状态无关。</p></blockquote><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li>始终使用ESM导入模块</li><li>使用 #pure 标注纯函数调用，JavaScript 中的函数调用语句也可能产生副作用，因此默认情况下 Webpack 并不会对函数调用做 Tree Shaking 操作。不过，开发者可以在调用语句前添加 <code>/*#__PURE__*/</code> 备注，明确告诉 Webpack 该次函数调用并不会对上下文环境产生副作用。</li><li>禁止 Babel 转译模块导入导出语句，@babel/preset-env设置modules为commonjs是编译成commonjs风格的代码，webpack无法做模块静态分析.</li><li>使用支持 tree-shaking 的包，如使用lodash-es替代lodash</li></ol><p>综上，Tree-Shaking 是一种只对 ESM 有效的 Dead Code Elimination 技术，它能够自动删除无效（没有被使用，且没有副作用）的模块导出变量，优化产物体积。不过，受限于 JavaScript 语言灵活性所带来的高度动态特性，Tree-Shaking 并不能完美删除所有无效的模块导出，需要我们在业务代码中遵循若干最佳实践规则，帮助 Tree-Shaking 更好地运行。</p><h2 id="使用-scope-hoisting-合并模块" tabindex="-1"><a class="header-anchor" href="#使用-scope-hoisting-合并模块" aria-hidden="true">#</a> 使用 Scope Hoisting 合并模块</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ModuleConcatenationPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack/lib/optimize/ModuleConcatenationPlugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方法1： 将 \`mode\` 设置为 production，即可开启</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法2： 将 \`optimization.concatenateModules\` 设置为 true</span>
    <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">providedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 方法3： 直接使用 \`ModuleConcatenationPlugin\` 插件</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[t];function i(c,l){return a(),s("div",null,p)}const u=n(o,[["render",i],["__file","webpack-tree-shaking.html.vue"]]);export{u as default};
