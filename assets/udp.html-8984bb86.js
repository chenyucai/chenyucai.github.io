import{_ as P,o as e,c as p,a as t}from"./app-5b0f25a8.js";const a={},D=t('<h1 id="udp协议" tabindex="-1"><a class="header-anchor" href="#udp协议" aria-hidden="true">#</a> UDP协议</h1><p>UDP的主要特点是：</p><p>（1）UDP 是无连接的。即发送数据之前不需要建立连接（当然，发送数据结束时也没有连接可释放），因此减少了开销和发送数据之前的时延。</p><p>（2）UDP 使用尽最大努力交付。即不保证可靠交付，因此主机不需要维护复杂的连接状态表（这里面有许多参数）。</p><p>（3）UDP 是面向报文的。发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不分拆，而是保留这些报文的边界。这就是说，应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文，如图 5-4 所示。在接收方的 UDP，对 IP 层交上来的 UDP 用户数据报，在去除首部后就原封不动地交付上层的应用进程。也就是说，UDP 一次交付一个完整的报文。因此，应用程序必须选择合适大小的报文。若报文太长，UDP 把它交给 IP 层后，IP 层在传送时可能要进行分片处理，这会降低 IP 层的效率。反之，若报文太短，UDP 把它交给 IP 层后，会使 IP 数据报的首部的相对长度太大，这也降低了 IP 层的效率。</p><p>（4）UDP 没有拥塞控制。因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。很多的实时应用（如：IP电话、实时视频会议等）要求源主机以恒定的速率发送数据，并且允许在网络出现拥塞时丢失一部分数据，但却不允许数据有太大的时延。UDP 协议正好适合这种要求。</p><p>（5）UDP 支持一对一、一对多、多对一和多对多的交互通信。</p><p>（6）UDP的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短。</p><p>虽然某些实时应用需要使用没有拥塞控制的 UDP，但当很多的源主机同时都向网络发送高速率的视频流时，网络就有可能发生拥塞，结果大家都无法正常接收。因此，不使用拥塞控制功能的 UDP 有可能会引起网络发生严重的拥塞问题。</p>',9),U=[D];function c(o,r){return e(),p("div",null,U)}const n=P(a,[["render",c],["__file","udp.html.vue"]]);export{n as default};
