import{_ as e,o as r,c as a,a as t}from"./app-5b0f25a8.js";const i="/images/js-render-path-1.png",n={},o=t('<h1 id="关键渲染路径" tabindex="-1"><a class="header-anchor" href="#关键渲染路径" aria-hidden="true">#</a> 关键渲染路径</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p><strong>关键渲染路径(Critical Rendering Path)</strong> 是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。</p><p>大致步骤是这样：在解析 HTML 时会创建 DOM，HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSSOM。</p><p>浏览器引擎将两者结合起来以创建 Render Tree (渲染树)，Layout(布局)确定页面上所有内容的大小和位置，确定布局后，将像素 Paint (绘制)到屏幕上。</p><p><img src="'+i+'" alt="1"></p><p>因此网页生成的过程为：</p><ul><li>构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</li><li>构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li><li>构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</li><li>布局（Layout）：计算出每个节点在屏幕中的位置</li><li>绘制（Paint）：即遍历render树，并使用UI后端层绘制每个节点。</li></ul><h2 id="重排和重绘" tabindex="-1"><a class="header-anchor" href="#重排和重绘" aria-hidden="true">#</a> 重排和重绘</h2><p>重排：当DOM的变化影响了元素的几何信息(DOM对象的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p><p>触发条件：</p><ul><li>添加或者删除可见的DOM元素</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li></ul><p>重绘：当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。</p><p>触发条件：改变元素的color、background、box-shadow等属性</p><blockquote><p><strong>重排</strong>和<strong>重绘</strong>以每秒 60 帧的速度进行</p></blockquote>',15),l=[o];function d(c,s){return r(),a("div",null,l)}const h=e(n,[["render",d],["__file","js-render-path.html.vue"]]);export{h as default};
