import{_ as n}from"./mvvm-4-9723b1d5.js";import{_ as s,o as a,c as t,a as p}from"./app-5b0f25a8.js";const e="/images/mvvm-1.png",o="/images/mvvm-2.png",c="/images/mvvm-3.png",i={},l=p('<h1 id="聊聊mvvm框架" tabindex="-1"><a class="header-anchor" href="#聊聊mvvm框架" aria-hidden="true">#</a> 聊聊MVVM框架</h1><h2 id="mvvm的定义" tabindex="-1"><a class="header-anchor" href="#mvvm的定义" aria-hidden="true">#</a> MVVM的定义</h2><p>本质是数据驱动</p><ul><li>Model：可以理解为服务端数据或数据库的model，用于给客户端发送数据</li><li>View：可以理解为页面，用户看到的界面</li><li>ViewModel：连接view和model的桥梁，可以理解为Vue这类型的框架，通常接受Model发送的数据然后经过ViewModel类框架处理自动渲染到View层，View层也能通过用户操作经过ViewModel处理再发送给服务端进行存储。</li></ul><p><img src="'+e+'" alt="mvvm图"></p><p>与MVC的不同</p><p>MVC中Model与View与上述一样<br> Controller:理解为处理用户交互的部分，包括页面展示、调用接口等业务逻辑。</p><ol><li>最直观的区别就是ViewModel实现了Model和View直接数据的自动同步，我们再也不需要频繁的操作DOM来现实View。</li><li>之前MVC的手动频繁操作DOM会使页面渲染性能降低。MVVM可以比较好的解决这一点问题。</li><li>VM并不是完全的取代C，只是取代了操作DOM展示View的方面，该写的业务逻辑还是要写的。</li></ol><h2 id="双向绑定的原理及手写" tabindex="-1"><a class="header-anchor" href="#双向绑定的原理及手写" aria-hidden="true">#</a> 双向绑定的原理及手写</h2><p>双向绑定的原理是通过 数据劫持+观察者模式 来实现的。</p><ol><li>操作ViewModel的data对象，会自动更新View，原理通过Object。defineProperty</li><li>用户操作View，会自动更新data对象，原理是通过input事件</li></ol><p><img src="'+o+`" alt="mvvm图"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 手写一个双向数据绑定</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;input&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    
<span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> val <span class="token comment">// 更新view</span>
        input<span class="token punctuation">.</span>value <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
input<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计模式-观察者模式" tabindex="-1"><a class="header-anchor" href="#设计模式-观察者模式" aria-hidden="true">#</a> 设计模式-观察者模式</h2><p><img src="`+c+`" alt="mvvm图"></p><p>观察者模式就是当一个对象（目标）被修改时，则会自动通知依赖它的所有对象（观察者）。</p><ul><li>dep：发布者</li><li>watcher：观察者（订阅者）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 发布者</span>
<span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 观察者列表</span>
    <span class="token punctuation">}</span>
    <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token comment">// 添加观察者</span>
    <span class="token punctuation">}</span>
    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通知所有观察者调用update方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 观察者（订阅者）</span>
<span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb <span class="token comment">// 回调函数</span>
    <span class="token punctuation">}</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> watcher1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watcher1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> watcher2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;watcher2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>watcher1<span class="token punctuation">)</span>
dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>watcher2<span class="token punctuation">)</span>

dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>mvvm类框架在生命周期定义中大致是相同的，以vue的生命周期为例</p><ul><li>beforeCreate：初始化实例阶段，还不能访问data、props、computed、watch、methods这些数据。</li><li>created：能访问data、props、computed、watch、methods数据，但不能访问dom，但通常可以在这个阶段请求数据。</li><li>beforeMount：这是一个过渡阶段，模板已经编译好了，但是还未挂载到到页面。</li><li>mounted：表示vue整个初始化阶段已经完成，进入运行时阶段，可以访问dom。</li><li>beforeUpdate：此时date数据是最新的，但页面是旧的，页面尚未和最新数据数据保持同步。可在更新前访问现有的DOM，如手动移出添加的事件监听器。</li><li>updated：完成虚拟dom的重新渲染。注意：不要在此函数中操作数据（修改属性），否则就会陷入死循环。</li><li>beforeDestroy：Vue实例就已经从运行阶段进入到销毁阶段了。实例上的所有data和methods以及过滤器和指令都是处于可用状态，此时还没有真正的执行销毁过程，通常可以在这个阶段移除事件监听器。</li><li>destroyed：当执行到destroted函数的时候，组件已经完全销毁，此时组件中的所有的数据，方法，指令，过滤器...都已经销毁，不可用了。</li></ul><h2 id="实现框架" tabindex="-1"><a class="header-anchor" href="#实现框架" aria-hidden="true">#</a> 实现框架</h2><p>以vue框架为例</p><p><img src="`+n+'" alt="mvvm图"></p>',24),u=[l];function r(d,k){return a(),t("div",null,u)}const b=s(i,[["render",r],["__file","mvvm.html.vue"]]);export{b as default};
