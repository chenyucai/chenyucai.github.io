import{_ as e,o as a,c as r,a as i}from"./app-5b0f25a8.js";const s="/images/js-cors-1.png",o={},c=i('<h1 id="前端跨域通信的几种方式" tabindex="-1"><a class="header-anchor" href="#前端跨域通信的几种方式" aria-hidden="true">#</a> 前端跨域通信的几种方式</h1><h2 id="域名组成部分" tabindex="-1"><a class="header-anchor" href="#域名组成部分" aria-hidden="true">#</a> 域名组成部分</h2><p><img src="'+s+'" alt="1"></p><h2 id="什么是同源策略及其限制内容" tabindex="-1"><a class="header-anchor" href="#什么是同源策略及其限制内容" aria-hidden="true">#</a> 什么是同源策略及其限制内容</h2><p>同源策略指在限制一个源的资源与另一个源的资源进行交互。是一种隔离潜在恶意文件的安全机制。</p><p>同源是指“协议+域名+端口”三者相同，及时两个域名指向同一个ip地址，也非同源。</p><p>同源策略限制的内容有：</p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送会被浏览器拦截</li></ul><p>但是有三个标签是允许跨域加载资源：</p><ul><li><code>&lt;img src=&#39;xxx&#39;&gt;</code></li><li><code>&lt;link href=&#39;xxx&#39;&gt;</code></li><li><code>&lt;script src=&#39;xxx&#39;&gt;</code></li></ul><blockquote><p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</p></blockquote><h2 id="跨域的几种方式" tabindex="-1"><a class="header-anchor" href="#跨域的几种方式" aria-hidden="true">#</a> 跨域的几种方式</h2><h3 id="_1-jsonp" tabindex="-1"><a class="header-anchor" href="#_1-jsonp" aria-hidden="true">#</a> 1.jsonp</h3><p>jsonp原理是利用script标签跨域加载资源，但是需要服务端支持返回，但仅支持get请求。</p><h3 id="_2-cors" tabindex="-1"><a class="header-anchor" href="#_2-cors" aria-hidden="true">#</a> 2.cors</h3><p>cors需要服务端/nginx配置请求头<code>Access-Control-Allow-Origin:*</code></p><h3 id="_3-postmessage" tabindex="-1"><a class="header-anchor" href="#_3-postmessage" aria-hidden="true">#</a> 3.postMessage</h3><p>postMessage支持两个窗口间进行通信</p><h3 id="_4-websocket" tabindex="-1"><a class="header-anchor" href="#_4-websocket" aria-hidden="true">#</a> 4.webSocket</h3><p>websocket不受同源策略限制</p><h3 id="_5-iframe-location-hash" tabindex="-1"><a class="header-anchor" href="#_5-iframe-location-hash" aria-hidden="true">#</a> 5.iframe+location.hash</h3><p>利用iframe地址的location.hash进行传值。</p>',22),h=[c];function t(d,n){return a(),r("div",null,h)}const p=e(o,[["render",t],["__file","js-cors.html.vue"]]);export{p as default};
