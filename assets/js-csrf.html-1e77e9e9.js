import{_ as a,o as n,c as s,a as e}from"./app-5b0f25a8.js";const t={},i=e(`<h1 id="前端安全性问题" tabindex="-1"><a class="header-anchor" href="#前端安全性问题" aria-hidden="true">#</a> 前端安全性问题</h1><h2 id="csrf-跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#csrf-跨站请求伪造" aria-hidden="true">#</a> CSRF（跨站请求伪造）</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>csrf全称：<strong>Cross-Site Request Forgery</strong></p><p>原理：<strong>核心原理是利用请求会自动带上cookie的特性</strong>，攻击者盗用了你的身份，以你的名义进行恶意请求。它能做的事情有很多包括：以你的名义发送邮件、发信息、盗取账号、购买商品、虚拟货币转账等。总结起来就是：个人隐私暴露及财产安全问题。</p><p>阐述csrf核心攻击思想：</p><ol><li>浏览并登录信任网站（举例：微博）</li><li>登录成功后在浏览器存下cookie</li><li>用户在没有登出微博的情况下，访问了危险网站</li><li>危险网站向微博服务端发送一个恶意点赞请求，如http://weibo.com/api/dianzan</li><li>这时候请求就会自动带上原来的cookie进行api请求</li><li>微博验证请求合法（区分不出是否用户发送的），然后就出现刷点赞了</li><li>达到恶意目的</li></ol><h3 id="防御措施" tabindex="-1"><a class="header-anchor" href="#防御措施" aria-hidden="true">#</a> 防御措施</h3><ul><li>服务端验证请求来源。服务端可以通过http请求头的referer或origin来判断请求来源，决定是否响应。</li><li>使用token验证。使用不存放在cookie里的token，这样请求不会自动带上token。</li><li>服务端设置cookie的SameSite属性。</li></ul><h2 id="xss-css-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#xss-css-跨站脚本攻击" aria-hidden="true">#</a> XSS/CSS（跨站脚本攻击）</h2><h3 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1" aria-hidden="true">#</a> 基本概念</h3><p>XSS 全称是 <strong>Cross Site Scripting</strong>，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。</p><p>XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。</p><h3 id="防御措施-1" tabindex="-1"><a class="header-anchor" href="#防御措施-1" aria-hidden="true">#</a> 防御措施</h3><ul><li>input输入框对数据进行校验，诸如<code>&lt;script&gt;、&lt;img&gt;、&lt;a&gt;</code>等标签进行过滤。v-html类似。</li><li>设置cookie为HttpOnly，防止xss窃取用户的cookie信息。</li><li>meta标签CSP白名单，明确告诉浏览器哪些资源可以加载并执行，<code>&lt;meta http-equiv=“Content-Security-Policy” content=“配置项” &gt;</code></li></ul><h2 id="clickjacking-点击劫持" tabindex="-1"><a class="header-anchor" href="#clickjacking-点击劫持" aria-hidden="true">#</a> ClickJacking（点击劫持）</h2><p>一般是别人用iframe嵌入你的网页进行恶心操作</p><p>防御措施：</p><p>nginx配置X-Frame-Options 响应头【DENY：不能被所有网站嵌套或加载；SAMEORIGIN：只能被同域网站嵌套或加载；ALLOW-FROM URL：可以被指定网站嵌套或加载。】</p><p><code>add_header X-Frame-Options SAMEORIGIN always;</code></p><h2 id="sql注入" tabindex="-1"><a class="header-anchor" href="#sql注入" aria-hidden="true">#</a> SQL注入</h2><p>服务端sql拼接时要注意，尽量使用orm库。</p><h2 id="cdn劫持" tabindex="-1"><a class="header-anchor" href="#cdn劫持" aria-hidden="true">#</a> CDN劫持</h2><p>出于性能考虑，前端应用通常会把一些静态资源存放到CDN（Content Delivery Networks）上面，例如 js 脚本和 style 文件。这么做可以显著提高前端应用的访问速度，但与此同时却也隐含了一个新的安全风险。如果攻击者劫持了CDN，或者对CDN中的资源进行了污染，攻击者可以肆意篡改我们的前端页面，对用户实施攻击。</p><p>现在的CDN以支持SRI为荣，script 和 link 标签有了新的属性 integrity，这个属性是为了防止校验资源完整性来判断是否被篡改。它通过 验证获取文件的哈希值是否和你提供的哈希值一样来判断资源是否被篡改。</p><p>使用 SRI 需要两个条件：一是要保证 资源同域 或开启跨域，二是在script标签中 提供签名 以供校验。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>
    <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>anomymous<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sha384-xBuQ/1e6QAUVyZXbSolEf3UrG4SJj7VViWzwZ/fpwhOZc4Q1ZNE1R0Sp84fzkF5TxP5z6Z<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://aaa.com/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),c=[i];function r(o,l){return n(),s("div",null,c)}const d=a(t,[["render",r],["__file","js-csrf.html.vue"]]);export{d as default};
